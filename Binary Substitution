Problem
Chef has a binary string S. He can replace any occurrence of -
01 with a
10 with b
010 with ab
101 with ba
While doing these operations, Chef noticed that he can end up with different strings depending upon the order of application of the operations.
Given the final string containing only a and b, Chef wants to know the number of possible strings he might have began with.
As the number of initial strings can be large, print the result modulo 998244353.

Input Format
  1. The first line of input will contain a single integer T, denoting the number of test cases.
  2. Each test case consists of a single line of input denoting S, the final string obtained after applying the operations.
  
Output Format
  For each test case, output the number of original strings that can result in the final string mod 998244353.

Constraints
  •	1 <= T <= 5.10^4
  •	1 <= |S| <= 10^5
  •	The sum of |S| over all test cases won't excedd 5. 10^5.
  •	S consists of a and b only.
 
Sample 1:
Input             Output
3                 2
ab                1
aa                2
abb

Explation:
Test case 1: The binary strings that can result in the string ab are 0110 and 010.
  • 0110: Replace the first two characters 01 with a and last two characters 10 with b. Thus, we get ab.
  • 010: Replace the characters 010 with abab.
Test case 2: The only binary string that can result in the string aa is 0101. 
In 0101, we replace the first two characters with a and last two characters with a as well.
Test case 3: The binary strings that can result in the string abb are 011010 and 01010.
  • 011010: Replace the first two characters 01 with a, next two characters 10 with b, and last two characters 10 with b. Thus, we get abb.
  • 01010: Replace the characters 010 with ab and the characters 10 with b.
  
  Solution : 
  language : C++17
  Code - 
  #include <iostream>
#include <bits/stdc++.h>
using namespace std;
long long int func(int var, string& a, vector<int>& kp, map<string, string>& code, string current, set<string>& dis, long long int mod){
    if(var < 0){
        auto it = dis.find(current);
        if(it == dis.end()){
            dis.insert(current);
            return 1;
        }
        return 0;
    }
    
    if(kp[var] != -1) return kp[var];
    
    long long int takingone = func(var-1, a, kp, code, code[a.substr(var, 1)+current], dis, mod);
    long long int takingtwo = 0;
    if(var-1 >= 0 &&  code.find(a.substr(var-1, 2)) != code.end())
        takingtwo = func(var-2, a, kp, code, code[a.substr(var-1, 2)]+current, dis, mod);
    return kp[var] = (takingone+takingtwo) % 998244353;   
}
long long int solve(){
    string m;
    cin >> m;
    long long int n = m.length();
    vector<int> kp(n, -1);
    map<string, string> hard {{"a", "01"}, {"b",  "10"}, {"ab" , "010"}, {"ba" , "101"}};
    set<string> nit;
    cout << func(n-1, m, kp, hard, "", nit, 998244353) << endl;
    return 0;    
}

int main() {
  long long int t;
  cin >> t;
  while(t--){
      solve();
  }
  return 0;
}
  


